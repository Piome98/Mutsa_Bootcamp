# Backend Bootcamp lecture_1

# 전체 학습 개요
# 파이썬 환경 설정
# 파이써 수강

# 산업군 내 역할 분리
"""
    frontend + backend -> 웹 프로그래밍
    frontend == HTML + CSS + JavaScript(응용)
                             JavaScript -> JQuery -> React.js, Vue.js, Anguler(TypeScript 기반)

    본 강의는 취업 목적으로 프로젝트를 진행함에, 백엔드를 메인 주제로 하지만 프론트엔드 요소로 리엑트도 일부 수강 예정

    backend == 서버 및 데이터베이스를 컨트롤 하는 프로그래밍(Python -> Django.py -> DB(SQL))

"""
# 파이썬 자료형의 이해:
"""
숫자형: 정수/소수/복소수
불린형:
시퀀스: 문자열/리스트/튜플
        print("Hello World) #문자열 출력
                            #따옴표 내에서 문자열이 연산되지 않고 있는 그대로 출력되는 이유는
                            #변수 내에 저장이 되는 원리는 이진수로 변환(ASCII code) 후 하드디스크에 입력됨(FIFO/FILO)
                            #모든 문자는 반드시 ASCII code를 통해 이진수로 1 대 1 매칭됨
                            #문자열은 문자 데이터를 다룰 수 있는 자료형으로, 내부적으로 **ASCII 코드 또는 유니코드(UTF-8)**로 변환되어 메모리에 저장됨. 
                            예: print("3+5")는 따옴표 내부의 내용을 있는 그대로 문자로 처리하기 때문에, 계산이 수행되지 않고 그대로 출력됨.

집합:
딕셔너리:

입력 -> 아스키코드를 이진수로 변환 후 메모리에 저장(폰트 지급)
출력 -> 확장자(.py, .js ...etc)에 맞는 폰트로 이진수 -> 아스키코드 재변환 후 출력

,를 이용해 출력하면, 출력값 간의 공백이 1개 발생 print(1,2) -> 1 2 출력

print("1" + 2) -> 일반적으로 자료형 충돌로 type error 발생하지만, Java를 이용하면 자료형 충돌 없이 12가 출력됨 -> 파이썬에서 원하는대로 출력하려면 형변환(str(2)) 과정이 추가돼야 됨


"""


# 변수
"""
val, var = 30, 30
print(val) -> val 에 저장된 값(30) 출력
print(val + 30) -> val에 저장된 int형 값(30)을 호출하고 print()안에 있는 숫자(int형)와 자료형 충돌이 없으므로 print()문 내에서 연산 실행, 결과값 출력

변수란 메모리에 저장된 데이터를 참조할 수 있는 이름이며, 메모리 주소를 통해 데이터를 관리함 

변수는 메인메모리(RAM)에 값을 저장하며, 각 변수는 고유한 메모리 주소값(index)을 가짐 

변수에 저장된 값은 언제든지 덮어쓰기, 추가, 삭제가 가능하며, 이 과정은 OS(운영체제)가 관리함

Java 및 C계열 언어에선 변수를 저장할 때 자료형을 명시해줘야 하지만, Python은 자료형의 명시가 필요 없음

x, y = 121, 222 -> x에 121, y에 222 저장
y, x = x, y -> x와 y 데이터 스위치(각 주소에 저장된 값을 교환)
print(x,y) -> 222, 121 출력(x엔 222가, y엔 121이 저장됨됨)
"""

#연산자
"""
= -> 대입 연산자
+, -, *, / -> 사칙연산 연산자

연산자 우선순위 -> 사칙연산자(곱셈, 나눗셈) >> 사칙연산자(덧셈, 뺄셈) >> 대입연산자 

"""


#회고 리스트:
"""
1. 아스키코드에 설명하시오
2. print("1" + 1)이 에러가 나는 이유와 11이 출력되도록 수정하시오
3. 변수 선언에 대하여 설명하시오
4. 파이썬에서의 데이터 타입에 대해 설명해 보시오(예습)
"""

print(1,int("1"), sep="")

a = input()
print(a%)